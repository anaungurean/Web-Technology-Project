openapi: 3.0.3
info:
  title: Swagger HEMA
  version: 1.0.11
servers:
  - url: https://http://localhost/TW/FrontEnd/HTML_Pages
tags:
  - name: user
    description: Operations about user
  - name: plants
    description: Everything about your Plants
    
paths:
  /register:
    post:
      tags:
        - user
      summary: Create user
      operationId: createUser
      parameters:
        - name: email
          in: query
          description: The user email for register
          required: true
          schema:
            type: string
        - name: username
          in: query
          description: The user name for register
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for register in clear text
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: string
        '409':
          description: User already exists
      
            
  /auth:
    post:
      tags:
        - user
      summary: Login a user
      operationId: signInUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse' 
        '401':
          description: Invalid info.
          
     
  /users:
    get:
      tags:
        - user
      summary: Get user by id
      operationId: getUserById
      security:
       - bearerAuth: [] 
      parameters:
        - name: id
          in: query
          description: The user id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '201':
          description: Authentication successful
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Invalid info.
          
      
  /profile:
    put:
      tags:
        - user
      summary: Edit user profile
      operationId: editUserProfile
      security:
       - bearerAuth: [] 
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Not Found
        
          
  /getUser:
    get:
      tags:
        - user
      summary: Get user
      operationId: getUser
      security:
       - bearerAuth: [] 
      parameters:
        - name: id
          in: query
          description: The user id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          
          
  /deleteUser:
    delete:
      tags:
        - user
      summary: Delete a user
      operationId: deleteUser
      security:
       - bearerAuth: [] 
      parameters:
        - name: id
          in: query
          description: The user id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Not Found  
         
         
  /updatePassword:
    put:
      tags:
        - user
      summary: Update a user's password
      operationId: updatePassword
      parameters:
        - name: username
          in: query
          description: Username to update the password
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The new password
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Username not found
          
       
  /addPlant:
    post:
      tags:
        - plants
      summary: Adding a plant to the garden
      operationId: addPlant
      security:
       - bearerAuth: [] 
      parameters:
        - name: id_user
          in: query
          description: The user id
          required: true
          schema:
            type: integer
            format: int64
        - name: common_name
          in: query
          description: The common name of the plant
          required: true
          schema:
            type: string
        - name: scientific_name
          in: query
          description: The scientific name of the plant
          required: true
          schema:
            type: string
        - name: family
          in: query
          description: The family to which the plant belongs
          required: true
          schema:
            type: string
        - name: genus
          in: query
          description: The genus of the plant
          required: true
          schema:
            type: string
        - name: species
          in: query
          description: The species to which the plant belongs
          required: true
          schema:
            type: string
        - name: place
          in: query
          description: The place from which the plant was collected
          required: true
          schema:
            type: string
        - name: date_of_collection
          in: query
          description: Date of collection of the plant
          required: true
          schema:
            type: string
        - name: color
          in: query
          description: The color of the plant
          required: true
          schema:
            type: string
        - name: collection_name
          in: query
          description: The collection of which the plant is a part
          required: true
          schema:
            type: string
        - name: hashtags
          in: query
          description: Hashtags representative of the plant
          required: true
          schema:
            type: string
        - name: filename
          in: query
          description: File to upload
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: string
        '422':
          description: Invalid input
          
          
  /getPlant:
    get:
      tags:
        - plants
      summary: Get a plant by plant id or filename
      operationId: getPlant
      security:
       - bearerAuth: [] 
      parameters:
        - name: id
          in: query
          description: The plant id
          required: false
          schema:
            type: integer
            format: int64
        - name: filename
          in: query
          description: The plant filename
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plant'
        '404':
          description: Not found
   
 
  /getMyCollection:
    get:
      tags:
        - plants
      summary: Get my plant collection
      operationId: getMyCollection
      security:
       - bearerAuth: [] 
      parameters:
        - name: id_user
          in: query
          description: The user id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Plant'
        '404':
          description: Not found      
          
          
  /getCollections:
    get:
      tags:
        - plants
      summary: Get all plant collections
      operationId: getCollections
      security:
       - bearerAuth: [] 
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Plant'
        '404':
          description: Not found     
  
          
  /getTop:
    get:
      tags:
        - plants
      summary: Get top 3 plants
      operationId: getTop
      security:
       - bearerAuth: [] 
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Plant'
        '404':
          description: Not found        
          
          
  /updatePlant:
    put:
      tags:
        - plants
      summary: Update the information about a plant
      operationId: updatePlant
      security:
       - bearerAuth: [] 
      requestBody:
        description: Update an existing plant in the garden
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Plant'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Not found  

          
  /deletePlant:
    delete:
      tags:
        - plants
      summary: Delete a plant from your garden
      operationId: deletePlant
      security:
       - bearerAuth: [] 
      parameters:
        - name: id
          in: query
          description: The plant id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Not found     
          
          
          
components:
  schemas:

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        username:
          type: string
        password:
          type: string
        descriere:
          type: string
        hobby:
          type: string
        interes_plant:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        phone:
          type: string
        adresa:
          type: string
      xml:
        name: user
        

    Plant:
      type: object
      properties:
        id:
          type: integer
          format: int64
        id_user:
          type: integer
          format: int64
        common_name:
          type: string
        scientific_name:
          type: string
        family: 
          type: string
        genus:
          type: string
        species:
          type: string
        place:
          type: string
        date_of_collection:
          type: string
        color:
          type: string
        collection_name:
          type: string
        hashtags:
          type: string
        filename:
          type: string
      xml:
        name: plant
        
        

    ApiResponse:
      type: object
      properties:
        jwt:
          type: string
        message:
          type: string
      xml:
        name: '##default'


  securitySchemes:
    bearerAuth: 
      type: http
      scheme: bearer
      bearerFormat: JWT